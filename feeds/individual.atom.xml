<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CMPUT 402 - individual</title><link href="https://cmput402.github.io/" rel="alternate"></link><link href="https://cmput402.github.io/feeds/individual.atom.xml" rel="self"></link><id>https://cmput402.github.io/</id><updated>2024-01-30T00:00:00-07:00</updated><subtitle>Software Quality</subtitle><entry><title>Individual Assignment 1: Testing Theory</title><link href="https://cmput402.github.io/individual/testing-theory.html" rel="alternate"></link><published>2024-01-30T00:00:00-07:00</published><updated>2024-01-30T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-01-30:/individual/testing-theory.html</id><summary type="html">&lt;p&gt;Individual Assignment 1: Testing Theory&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#submission"&gt;Submission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-1-6-marks"&gt;Question 1 (6 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-2-6-marks"&gt;Question 2 (6 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-3-7-marks"&gt;Question 3 (7 marks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#question-4-19-marks"&gt;Question 4 (19 marks)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="submission"&gt;Submission&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Please upload a &lt;strong&gt;pdf&lt;/strong&gt; on eClass.&lt;/li&gt;
&lt;li&gt;Please draw all diagrams using any program of your choice such that
    your TA can clearly read it.&lt;/li&gt;
&lt;li&gt;The assignment consists of 4 questions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;The learning objectives of this assignment is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;develop equivalence classes&lt;/li&gt;
&lt;li&gt;gain experience in combinatorial testing&lt;/li&gt;
&lt;li&gt;identify states and transitions from a high-level description of a
    problem&lt;/li&gt;
&lt;li&gt;create simple control flow graphs&lt;/li&gt;
&lt;li&gt;calculate different types of coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that it is important for you to understand how to solve the
problems in this assignment, as you will get similar types of problems
in the exams.&lt;/p&gt;
&lt;p&gt;The assignment is out of 38 marks.&lt;/p&gt;
&lt;h3 id="question-1-6-marks"&gt;Question 1 (6 marks)&lt;/h3&gt;
&lt;p&gt;You are evaluating a system that requires a user to login with a
"strong" password. The password must satisfy the following requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Minimum length: 10 characters&lt;/li&gt;
&lt;li&gt;At least two uppercase characters&lt;/li&gt;
&lt;li&gt;At least one number&lt;/li&gt;
&lt;li&gt;At least one special symbol&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your goal is to combinatorially test the &lt;code&gt;resetPassword&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;boolean resetPassword (String newPwd);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;resetPassword&lt;/code&gt; function takes a string as an input and returns true
if the password meets the above requirements. If the password does not
meet stated requirements, then the new password is rejected and
&lt;code&gt;resetPassword&lt;/code&gt; returns false.&lt;/p&gt;
&lt;p&gt;To create concrete test cases for this function, you will decompose the
relevant dimensions of the password constraints. Use
&lt;a href="https://github.com/snadi/tslgenerator"&gt;TSLGenerator&lt;/a&gt; to help you
generate the test frames. Your steps are roughly as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify equivalence classes for the password inputs.&lt;/li&gt;
&lt;li&gt;Translate the specification from Step 1 to TSL's format and generate
    an all-pairs test specification.&lt;/li&gt;
&lt;li&gt;Identify inadmissable combinations or opportunities to reduce your
    test cases, flag them and adjust your constraints or classes, then
    regenerate tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that this process may require some iteration: you may want to use
the results of Step 3 to refine your inputs as generated from Steps 1
and 2.&lt;/p&gt;
&lt;p&gt;For this question, you must (1) describe your final equivalence classes
and constraints. (2) State how many tests TSL were initially generated
in Step 1 with no constraints and how many tests were finally generated
after iterating through the above steps. (3) list the final test frames
generated by the tool. (4) pick 3 test frames and create concrete test
cases for them (remember that test cases include input and output), (5)
Briefly (3-5 sentences), reflect on your experience in this process. Is
this something you would use again? Did it help you think about the
domain?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint: Note that this question does not have a single correct answer.
The goal is for you to think about criteria that make sense to partition
your domain into equivalence classes and what these equivalence classes
are. If you end up having too many test frames for such a simple problem
(e.g., 50-80), then perhaps think of further constraints that can help
you reduce this number.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="question-2-6-marks"&gt;Question 2 (6 marks)&lt;/h3&gt;
&lt;p&gt;For the following code, (a) provide a list of test cases that achieve
full branch coverage, keeping in mind that this is Java code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the same code, (b) provide a list of test cases that achieves full
statement coverage, but not full branch coverage.&lt;/p&gt;
&lt;h3 id="question-3-7-marks"&gt;Question 3 (7 marks)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A check-in machine is installed at an airport. A detailed
description of how to use this machine is as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To use the check-in machine adhere to the following procedure:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can choose to check in with your booking number or with your
    credit card:&lt;/p&gt;
&lt;p&gt;(a) You have chosen to check in with your booking number. Enter your
    number and click "Continue".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;validates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;booking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;numbers&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;correct&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;iii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;correct&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;able&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;again&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(b) You have chosen to check in with your credit card. Put your card
    into the machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;validates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;accepted&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;iii&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;card&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rejected&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;machine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will now be prompted for the number of luggage items you want to
    check in. When you have entered the number, you click "Continue" and
    the machine goes to 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will now be asked if you want to reserve a seat or change an
    existing seat reservation (if you have already reserved a seat)&lt;/p&gt;
&lt;p&gt;(a) If you confirm, the machine goes to 4&lt;/p&gt;
&lt;p&gt;(b) If you do not confirm, the machine goes to 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You choose an available seat and click "Continue". The machine goes
    to 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your boarding card will be printed out along with the luggage tags.
    When you have taken the boarding card and luggage tags, the machine
    goes to 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The machine wishes you an enjoyable flight, and goes back to 1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;During interaction with the machine, you always have the possibility to
click "Cancel". If you do so, the machine will immediately go back to
1.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(a) [4 marks] Draw a finite state machine (a.k.a state transition
    diagram) that shows how the machine works. Make sure to clearly
    label your states (e.g., with numbers 1, 2 etc), such that you can
    refer to them in the next question. Also, beside the graph, write
    the total number of nodes and transitions in your graph.&lt;/p&gt;
&lt;p&gt;(b) [1 mark] Write down a set of test cases, where each test case is a
    sequence of states (e.g., 1-&amp;gt;2-&amp;gt;3 etc), to achieve 100 percent
    state coverage.&lt;/p&gt;
&lt;p&gt;(c) [1 mark] What is the transition coverage of the test suite you
    created in (b)?&lt;/p&gt;
&lt;p&gt;(d) [1 mark] Is there any relationship between transition coverage and
    state coverage?&lt;/p&gt;
&lt;h3 id="question-4-19-marks"&gt;Question 4 (19 marks)&lt;/h3&gt;
&lt;p&gt;Consider the following method &lt;code&gt;isValidMove&lt;/code&gt; given below (&lt;em&gt;line numbers
shown for easier reference&lt;/em&gt;). It is based on the game
&lt;a href="https://bicyclecards.com/how-to-play/klondike/"&gt;Klondike&lt;/a&gt; where you
move cards around and the goal is to play move cards in way so that all
the cards end up in the suits where each of the four suits is a sequence
from Ace to King.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid: &amp;lt;from&amp;gt; and &amp;lt;to&amp;gt; both needs to be non-empty strings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="mf"&gt;6.&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Valid: stock to pile&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;7.&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="mf"&gt;8.&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Valid: stock to suit&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;9.&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="mf"&gt;10.&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;
&lt;span class="mf"&gt;11.&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid: &amp;lt;to&amp;gt; value is invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mf"&gt;12.&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mf"&gt;13.&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Valid: pile to (pile or suit)&amp;quot;&lt;/span&gt;
&lt;span class="mf"&gt;14.&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="mf"&gt;15.&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid &amp;lt;from&amp;gt; or &amp;lt;to&amp;gt; value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Helper&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUITS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidPileNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NumberFormatException&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(a) [4 marks] Draw a fully labelled control-flow graph for the method
    &lt;code&gt;isValidMove&lt;/code&gt;. You may use the labels A - E shown in the code to
    label predicates in the graph. For easier traceability for us when
    marking, please use the line numbers in the code to label nodes in
    your graph.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that the method &lt;code&gt;isValidPileNumber&lt;/code&gt; and the variable
&lt;code&gt;SUITS&lt;/code&gt; are provided to help you understand the logic, and they are not
be a part of the control-flow graph.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(b) [1 mark] Obtaining a 100% statement (a.k.a node) coverage requires
    (at least) six tests on this graph. Explain why.&lt;/p&gt;
&lt;p&gt;(c) [9 marks] Provide six tests (as calls to &lt;code&gt;isValidMove(from, to)&lt;/code&gt;)
    that satisfy 100% statement coverage on this graph. Make your tests
    short. You need to include assert statements in your test to
    indicate the expected output, or put a comment to clearly indicate
    what the expected output of this test is. &lt;strong&gt;For each test, indicate
    the path it covers.&lt;/strong&gt; For easier readability, please follow the
    following template for specifying your concrete tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//ADD COVERED PATH AS A COMMENT&lt;/span&gt;
&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;EXPECTED&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isValidMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FROM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(d) [5 marks] Identify the conditions in this program and create a
    test suite with 100% MC/DC coverage. For each test case, provide
    concrete values for the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; parameters. You &lt;strong&gt;must&lt;/strong&gt;
    show your intermediate work and how you arrived to your answer.
    Final answers only will not get a grade.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint: for each branch in the program, break it down into its
conditions, then create the MC/DC table for each branch predicate.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Copyright 2021, 2022 Dr. Sarah Nadi. Copyright 2023, 2024 Dr. Hazel Campbell. All rights reserved.&lt;/p&gt;</content><category term="individual"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry><entry><title>Individual Assignment 2: Testing with Mocks</title><link href="https://cmput402.github.io/individual/testing-mocks.html" rel="alternate"></link><published>2024-01-30T00:00:00-07:00</published><updated>2024-01-30T00:00:00-07:00</updated><author><name>Hazel Victoria Campbell</name></author><id>tag:cmput402.github.io,2024-01-30:/individual/testing-mocks.html</id><summary type="html">&lt;p&gt;Individual Assignment 2: Testing with Mocks&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-goals"&gt;Learning Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#task-unit-test-functionalities-of-a-desktop-application"&gt;Task: Unit test functionalities of a desktop application&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-interesting-information"&gt;Step 1: Interesting Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-5-dont-exist-in-the-code-at-all-yet-you-need-to-add-the-functionality-yourself"&gt;2-5 don't exist in the code at all yet. You need to add the functionality yourself.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-2-robustness-tactic"&gt;Step 2: Robustness Tactic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#deliverables"&gt;Deliverables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements-and-restrictions"&gt;Requirements and Restrictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grading"&gt;Grading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hints"&gt;Hints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;
&lt;p&gt;Most parts of software systems do not work in isolation and are difficult to test when the environment changes. Rather, these parts collaborate with multiple components to perform tasks that we want to implement and test. Various forms of mocks, stubs, fakes and other objects are used in many forms of testing to simulate the behavior of real objects that our implementation depends on to perform a specific task. One of the benefits of mocking dependencies is that we can focus on testing our implementation given that we have obtained the information that we expected from those dependencies. Furthermore, it allows to simulate error conditions in the environment and thus to test a system for robustness. In this assignment, you will test a desktop application by mocking a network service.&lt;/p&gt;
&lt;h3 id="learning-goals"&gt;Learning Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Apply mocking testing tools and techniques.&lt;/li&gt;
&lt;li&gt;Overcome mocking difficulties caused by conflicting tools.&lt;/li&gt;
&lt;li&gt;Unit test functionalities of a desktop application that depends on a network service&lt;/li&gt;
&lt;li&gt;Design test cases to assess robustness of error handling implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resources"&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github API &lt;a href="https://github-api.kohsuke.org/"&gt;https://github-api.kohsuke.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mockito API &lt;a href="https://site.mockito.org/"&gt;https://site.mockito.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EasyMock API &lt;a href="http://easymock.org/"&gt;http://easymock.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create your repository by accessing &lt;a href="https://classroom.github.com/a/P6dDMwhK"&gt;the GitHub classroom assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="task-unit-test-functionalities-of-a-desktop-application"&gt;Task: Unit test functionalities of a desktop application&lt;/h3&gt;
&lt;p&gt;You are developing a GitHub dataminer in Java. Your application will automate a few data gathering tasks on GitHubt that may be of interest, such as finding out what day of the week (Monday, Tuesday, etc.) someone makes the most commits on. The current code is really basic and you are allowed to extend it. When developing your miner, you realize that interacting with the GitHub API is not simple as you expected. You need to obtain a token for interacting with the API. Also you do not want to run into API limits due to your tests running too often. You want to test whether your application could handle network connections gracefully. Primarily, you want to test the logic of your application and your error handling mechanisms, assuming you have already interacted with GitHub and received some response from the API. &lt;strong&gt;Your goal in this assignment is to mock the &lt;a href="https://github-api.kohsuke.org/"&gt;Java GitHub API&lt;/a&gt; dependency to test your implementation and its robustness.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The starter code contains some basic functionality for a GitHub miner. Extend the miner as described below and automate testing of the functionality of your miner without actually interacting with the real GitHub API. &lt;strong&gt;In the process, you may need to modify the existing source code to make the project testable (e.g., private methods cannot be tested and static method calls cannot be mocked).&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id="step-1-interesting-information"&gt;Step 1: Interesting Information&lt;/h4&gt;
&lt;p&gt;The application must determine the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What day of the week you make the most git commits on.&lt;/li&gt;
&lt;li&gt;What is the average time between commits&lt;/li&gt;
&lt;li&gt;How long do issues on your repos stay open for, on average (consider only closed issues)&lt;/li&gt;
&lt;li&gt;How long do pull requests on your repos stay open for, on average&lt;/li&gt;
&lt;li&gt;How many branches do your repos have, on average&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is some code provided to help you get started with #1, but you should improve the code.&lt;/p&gt;
&lt;h3 id="2-5-dont-exist-in-the-code-at-all-yet-you-need-to-add-the-functionality-yourself"&gt;2-5 don't exist in the code at all yet. You need to add the functionality yourself.&lt;/h3&gt;
&lt;p&gt;Test each of these functionalities without actually communicating with the GitHub servers.
Your code should only communicate with the GitHub servers if Main is run normally, outside of tests. You do not need to test the Main function of the miner, just the functions that abstract the above mining functionality.&lt;/p&gt;
&lt;h4 id="step-2-robustness-tactic"&gt;Step 2: Robustness Tactic&lt;/h4&gt;
&lt;p&gt;In addition to the above functionally, you need to improve the error handling mechanism of the application. Instead of the application crashing with some error if a task could not be completed, you need to retry 3 times before gracefully reporting an error message. You will need to test that this robustness tactic actually works as expected. &lt;/p&gt;
&lt;p&gt;We recommend to add this robustness tactic to all interactions with the GitHub API, &lt;strong&gt;but for this assignment, it is sufficient to implement and test it for a single function of your choice.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="deliverables"&gt;Deliverables&lt;/h3&gt;
&lt;p&gt;Submit your solution as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All the code of implementation and tests regarding both steps should be in your GitHub classroom individual repo; tests should be executed automatically with Gradle.&lt;/li&gt;
&lt;li&gt;Submit a short report with explicit subsections (&amp;lt; 2 pages, hard limit) as a single PDF to eClass, describing the design decisions that you made to enable testing. Specifically: 
    a.  Describe which elements you chose to mock and why and where mocking was not necessary or useful.
    b.  Describe how you refactored the code to make it easier to test.
    c.  Explicitly mention which function you chose to implement robustness for and describe how you assessed that your testing w.r.t robustness is adequate.
    d.  If you had more time and resources, would you propose additional changes to make testing easier?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Please indicate your repo url in your report&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="requirements-and-restrictions"&gt;Requirements and Restrictions&lt;/h3&gt;
&lt;p&gt;You must follow good testing practice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You must actually test the code that you are trying to test.&lt;/li&gt;
&lt;li&gt;You should not mock your own code (with the exception of unavoidable wrapper classes: see Hints section below).&lt;ul&gt;
&lt;li&gt;You should only be mocking the API provided by the "github-api" package.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All methods and classes in your production code should be in use by the production code.&lt;ul&gt;
&lt;li&gt;Do not add special methods, constructors, or classes that are only ever called by your testing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="grading"&gt;Grading&lt;/h3&gt;
&lt;p&gt;Tota: 35 marks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1 (15 marks, 3 for each functionality)&lt;/li&gt;
&lt;li&gt;Step 2 (10 marks, 5 for adding robustness + 5 for testing it)&lt;/li&gt;
&lt;li&gt;Report (10 marks)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hints"&gt;Hints&lt;/h3&gt;
&lt;p&gt;You will need to change private visibility to protected visibility in order to access them from your testing code. &lt;/p&gt;
&lt;p&gt;Mockito and github-api both use Java bytecode manipulation. Mockito does this to help inject dependencies. However, this can come into conflict with methods in the github-api that are decorated with &lt;code&gt;@WithBridgeMethods&lt;/code&gt;. One example is the &lt;code&gt;GHIssue.comment&lt;/code&gt; method. This can result in an error like &lt;code&gt;Date cannot be returned by getCreatedAt() getCreatedAt() should return String&lt;/code&gt;. This error message doesn't really make sense because the application bytecode was manipulated &lt;em&gt;after&lt;/em&gt; being compiled. In order to solve this, you will need to create a wrapper for &lt;code&gt;GHIssue&lt;/code&gt;, use the wrapper in the production code, and then mock the wrapper instead of the wrapper class from github-api in the test code. You will also need to do this for any other methods that are decorated with &lt;code&gt;@WithBridgeMethods&lt;/code&gt; in the &lt;a href="https://github.com/hub4j/github-api/tree/main/src/main/java/org/kohsuke/github"&gt;github-api code&lt;/a&gt;. So if you get a strange error with impossible types, check the code of github-api to see if it uses such a decorator, and add a wrapper class as needed. This is not the only way to solve this problem, but it's the easiest way we've found so far. &lt;em&gt;Wrapper classes shouldn't do anything but just call the class they are wrapping.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Usually you should avoid modifying the production code to add wrappers that are only necessary for the test code to work. However, in this case it is unavoidable becuase the methods mockito and the github-api code use are in conflict. Similar conflicts can also arise in other programming languages such as Python.&lt;/p&gt;
&lt;p&gt;Keep in mind that there are many different ways to solve everything in this assignment. For example, mockito has &lt;code&gt;@&lt;/code&gt; decorators that can make your code a lot cleaner than the provided sample code.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;try (MockedConstrcution&lt;/code&gt; pattern to intercept any constructor. This is using a Java feature called &lt;a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"&gt;try-with-resources&lt;/a&gt;. But its not necessary to do unless the "new" you're trying to intercept is in the production code (or somewhere inside of github-api). For any constructors called in the testing code, you can just &lt;code&gt;mock(Whatever.class)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Copyright 2021, 2022 Dr. Sarah Nadi. Copyright 2023, 2024 Dr. Hazel Campbell. All rights reserved.&lt;/p&gt;</content><category term="individual"></category><category term="labs"></category><category term="policy"></category><category term="grading"></category></entry></feed>